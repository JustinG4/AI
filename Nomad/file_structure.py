import os
import openai
from pdf_reports import pug_to_html, write_report
import time


def getFileAndDirs(path):
    file_list = []
    for root, dirs, files in os.walk(path):
        for d in dirs:
            x = os.path.join(root, d)
            file_list.append(x)
        for f in files:
            y = os.path.join(root, f)
            file_list.append(y)

    return file_list


def getCodeFiles(file_list):
    # this will return a tuple of root and extension
    files = file_list
    code_files = []

    for file in files:
        split_tup = os.path.splitext(file)
        # extract the file name and extension
        file_name = split_tup[0]
        file_extension = split_tup[1]

        if file_extension == '.c':
            code_files.append(file)
        elif file_extension == '.java':
            code_files.append(file)
        elif file_extension == '.py':
            code_files.append(file)
        elif file_extension == '.cs':
            code_files.append(file)
        elif file_extension == '.PHP':
            code_files.append(file)
        elif file_extension == '.swift':
            code_files.append(file)
        elif file_extension == '.vb':
            code_files.append(file)
        elif file_extension == '.adb':
            code_files.append(file)
        elif file_extension == '.cpp':
            code_files.append(file)
        elif file_extension == '.xml':
            code_files.append(file)

    return code_files


def generatePDFReport(data):
    # calculate how big table should be
    files = data["Code File List"]
    table_size = len(files)

    # create a empty text file
    fp = open('template.pug', 'w')

    fp.write('img(style="width:400px; display:block; margin:0 auto;\n')
    fp.write('    src="file:///{{ egf_logo_url }}")')
    fp.write('\n')
    fp.write('#sidebar: p Hey, I am a sidebar text ! I make your document look much more serious.\n')
    fp.write('\n')
    fp.write('\n')
    fp.write('h1 {{ title }}\n')
    fp.write('\n')
    fp.write('\n')
    fp.write('.ui.piled.segment: p.\n')
    fp.write('  This is an analysis generated by Nomad, a powerful development tool driven by ChatGPT.\n')
    fp.write('  What you are looking at is a detailed analysis of the file structure and code files included in your project\n')
    fp.write('\n')
    fp.write(':markdown\n')
    fp.write('  ##  High-Level Analysis (File Structure)\n')
    fp.write('  ' + data["File Structure Analysis"] + '\n')
    fp.write('\n')
    fp.write(':markdown\n')
    fp.write('  ##  High-Level Analysis II (Code)\n')
    fp.write('  This is an analysis generated by Nomad, a powerful development tool driven by ChatGPT.\n')
    fp.write('  What you are looking at is a detailed analysis of the file structure and code files included in your project\n')
    fp.write('\n')
    fp.write('\n')
    fp.write('table.ui.celled.table\n')
    fp.write('  thead\n')
    fp.write('    tr\n')
    fp.write('      th File\n')
    fp.write('      th Description\n')
    fp.write('  tbody\n')
    for x in range(0,table_size):
        fp.write('    tr\n')
        fp.write('      td ' + files[x] + '\n')
        fp.write('      td Placeholder\n')
        fp.write('    tr\n')
    fp.close()

    time.sleep(5)

    html = pug_to_html("template.pug", title="My report")
    write_report(html, "example_1.pdf")


def getHLAnalysis():
    path = input("Enter the file path: ")
    file_list = getFileAndDirs(path)

    # Set up the OpenAI API client
    openai.api_key = "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"
    completion = openai.Completion()

    prompt = 'If I provide you a file structure, can you tell me some things about the file types and describe what each file does? ' \
             'Here is the list of files: ' + str(file_list)[1:-1]

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0,
        max_tokens=2000,
        top_p=1,
        frequency_penalty=0.5,
        presence_penalty=0
    )
    file_structure_analysis = response["choices"][0]["text"]
    print(file_structure_analysis)

    time.sleep(5)

    code_files = getCodeFiles(file_list)
    prompt_2 = 'Can you explain what each the following files do: ' + str(code_files)[1:-1]
    response_2 = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt_2,
        temperature=0,
        max_tokens=3500,
        top_p=1,
        frequency_penalty=0.5,
        presence_penalty=0
    )
    code_file_analysis = response_2["choices"][0]["text"]
    print(code_file_analysis)

    # build analysis
    data = {
        "File Structure Analysis": file_structure_analysis.replace('\n', ''),
        "Code File Analysis": code_file_analysis.replace('\n', ''),
        "Code File List": code_files
    }

    return data


def getLLAnalysis():
    return 0

data = getHLAnalysis()
report = generatePDFReport(data)
